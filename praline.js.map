{"version":3,"sources":["src/praline.js"],"names":[],"mappings":";;;;;;;;;;;;;;kGAgBO,SAAS,QAAQ,CAAC,KAAK,CAAE,QAAQ,CAAE,CACzC,IAAI,CAAC,CAAG,KAAK,CAAC,MAAM,CAAC,AACrB,GAAI,CAAC,CAAC,CAAE,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,AAC9B,IAAI,OAAO,CAAG,EAAE,CAAC,AACjB,IAAI,IAAI,CAAG,SAAP,IAAI,EAAgB,CACvB,GAAI,QAAQ,CAAE,QAAQ,2BAAS,CAAC,AAChC,QAAQ,GAAG,IAAI,CAAC,CAChB,CAAC,AACF,KAAK,CAAC,OAAO,CAAE,SAAC,IAAI,CAAE,CAAC,CAAK,CAC3B,IAAI,IAAI,CAAG,EAAE,CAAC,AACd,GAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAE,CACxB,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,AACpB,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,CACpB,AACD,IAAI,CAAC,IAAI,CAAE,SAAC,GAAG,CAAE,IAAI,CAAK,CACzB,GAAI,GAAG,CAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,AAC1B,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,AAClB,GAAI,EAAC,EAAE,CAAC,CAAE,IAAI,kBAAC,IAAI,SAAK,OAAO,EAAC,CAAC,CACjC,CAAC,CAAC,AACH,IAAI,iBAAI,IAAI,CAAC,CAAC,CACd,CAAC,CAAC,CACH;;;;;;;;;;;;;GAiBM,SAAS,QAAQ,CAAC,KAAK,CAAE,QAAQ,CAAE,CACzC,IAAI,CAAC,CAAG,CAAC,CAAC,AACV,IAAI,CAAC,CAAG,KAAK,CAAC,MAAM,CAAC,AACrB,GAAI,CAAC,CAAC,CAAE,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,AAC9B,IAAI,OAAO,CAAG,EAAE,CAAC,AACjB,IAAI,IAAI,CAAG,SAAP,IAAI,EAAS,CAChB,IAAI,IAAI,CAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,AACtB,IAAI,IAAI,CAAG,EAAE,CAAC,AACd,GAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAE,CACxB,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,AACpB,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,CACpB,AACD,IAAI,CAAC,IAAI,CAAE,SAAC,GAAG,CAAE,IAAI,CAAK,CACzB,GAAI,GAAG,CAAE,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,AAC9B,OAAO,CAAC,CAAC,GAAC,CAAC,CAAC,GAAG,IAAI,CAAC,AACpB,GAAI,CAAC,GAAC,CAAC,CAAE,IAAI,EAAE,CAAC,KACX,QAAQ,kBAAC,IAAI,SAAK,OAAO,EAAC,CAAC,CAChC,CAAC,CAAC,AACH,IAAI,iBAAI,IAAI,CAAC,CAAC,CACd,CAAC,AACF,IAAI,EAAE,CAAC,CACP;;;wBAOc,UAAa,+BAAT,IAAI,yCAAJ,IAAI,0BACtB,GAAI,IAAI,CAAC,MAAM,KAAG,CAAC,CAAE,OAAO,QAAQ,iBAAI,IAAI,CAAC,CAAC,AAC9C,QAAQ,iBAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAC3B","file":"praline.js","sourceRoot":"src","sourcesContent":["\n/**\tExecute an Array of tasks in parallel.\n *\tTasks are functions, or arrays where the first item is a function and the remainder are arguments to pass it.\n *\tAll tasks must have Node-style callbacks like `(err, result)`.\n *\t@param {array} tasks\t\tTasks to run in parallel\n *\t@param {function} callback\tGets passed `(err, ...results)`\n *\n *\t@example\n *\t\tparallel([\n *\t\t\ttaskOne,\n *\t\t\t[taskTwo, 'arg1', 'arg2'],\n *\t\t\tcb => cb(null, 'data3')\n *\t\t], (err, t1Result, t2Result, data3) => {\n *\t\t\tcallback(err, { t1Result, t2Result, data3 });\n *\t\t});\n */\nexport function parallel(funcs, callback) {\n\tlet c = funcs.length;\n\tif (!c) return callback(null);\n\tlet results = [];\n\tlet done = (...args) => {\n\t\tif (callback) callback(...args);\n\t\tcallback = null;\n\t};\n\tfuncs.forEach( (func, i) => {\n\t\tlet args = [];\n\t\tif (Array.isArray(func)) {\n\t\t\targs = func.slice();\n\t\t\tfunc = args.shift();\n\t\t}\n\t\targs.push( (err, data) => {\n\t\t\tif (err) return done(err);\n\t\t\tresults[i] = data;\n\t\t\tif (!--c) done(null, ...results);\n\t\t});\n\t\tfunc(...args);\n\t});\n}\n\n\n/**\tExecute an Array of tasks in order.\n *\tTasks are functions, or arrays where the first item is a function and the remainder are arguments to pass it.\n *\tAll tasks must have Node-style callbacks like `(err, result)`.\n *\t@param {array} tasks\t\tTasks to run in sequence\n *\t@param {function} callback\tGets passed `(err, ...results)`\n *\n *\t@example\n *\t\tsequence([\n *\t\t\ttaskOne,\n *\t\t\t[taskTwo, 'arg1', 'arg2']\n *\t\t], (err, t1, t2) => {\n *\t\t\tcallback(err, { t1, t2 });\n *\t\t});\n */\nexport function sequence(funcs, callback) {\n\tlet i = 0;\n\tlet c = funcs.length;\n\tif (!c) return callback(null);\n\tlet results = [];\n\tlet next = () => {\n\t\tlet func = funcs[i++];\n\t\tlet args = [];\n\t\tif (Array.isArray(func)) {\n\t\t\targs = func.slice();\n\t\t\tfunc = args.shift();\n\t\t}\n\t\targs.push( (err, data) => {\n\t\t\tif (err) return callback(err);\n\t\t\tresults[i-1] = data;\n\t\t\tif (i<c) next();\n\t\t\telse callback(null, ...results);\n\t\t});\n\t\tfunc(...args);\n\t};\n\tnext();\n}\n\n\n/** Choose your own adventure.\n *\tParallel: `(tasks, callback)`\n *\tSequence: `(true, tasks, callback)`\n */\nexport default (...args) => {\n\tif (args.length===2) return parallel(...args);\n\tsequence(...args.slice(1));\n};\n"]}