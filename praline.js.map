{"version":3,"file":"praline.js","sources":["praline.es"],"names":["parallel","funcs","callback","c","length","results","done","apply","undefined","arguments","forEach","func","i","args","Array","isArray","slice","shift","push","err","data","concat","_toConsumableArray","sequence","next","_len","_key"],"mappings":"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","sourcesContent":["\n/**\tExecute an Array of tasks in parallel.\n *\tTasks are functions, or arrays where the first item is a function and the remainder are arguments to pass it.\n *\tAll tasks must have Node-style callbacks like `(err, result)`.\n *\t@param {array} tasks\t\tTasks to run in parallel\n *\t@param {function} callback\tGets passed `(err, ...results)`\n *\n *\t@example\n *\t\tparallel([\n *\t\t\ttaskOne,\n *\t\t\t[taskTwo, 'arg1', 'arg2'],\n *\t\t\tcb => cb(null, 'data3')\n *\t\t], (err, t1Result, t2Result, data3) => {\n *\t\t\tcallback(err, { t1Result, t2Result, data3 });\n *\t\t});\n */\nexport function parallel(funcs, callback) {\n\tlet c = funcs.length;\n\tif (!c) return callback(null);\n\tlet results = [];\n\tlet done = (...args) => {\n\t\tif (callback) callback(...args);\n\t\tcallback = null;\n\t};\n\tfuncs.forEach( (func, i) => {\n\t\tlet args = [];\n\t\tif (Array.isArray(func)) {\n\t\t\targs = func.slice();\n\t\t\tfunc = args.shift();\n\t\t}\n\t\targs.push( (err, data) => {\n\t\t\tif (err) return done(err);\n\t\t\tresults[i] = data;\n\t\t\tif (!--c) done(null, ...results);\n\t\t});\n\t\tfunc(...args);\n\t});\n}\n\n\n/**\tExecute an Array of tasks in order.\n *\tTasks are functions, or arrays where the first item is a function and the remainder are arguments to pass it.\n *\tAll tasks must have Node-style callbacks like `(err, result)`.\n *\t@param {array} tasks\t\tTasks to run in sequence\n *\t@param {function} callback\tGets passed `(err, ...results)`\n *\n *\t@example\n *\t\tsequence([\n *\t\t\ttaskOne,\n *\t\t\t[taskTwo, 'arg1', 'arg2']\n *\t\t], (err, t1, t2) => {\n *\t\t\tcallback(err, { t1, t2 });\n *\t\t});\n */\nexport function sequence(funcs, callback) {\n\tlet i = 0;\n\tlet c = funcs.length;\n\tif (!c) return callback(null);\n\tlet results = [];\n\tlet next = () => {\n\t\tlet func = funcs[i++];\n\t\tlet args = [];\n\t\tif (Array.isArray(func)) {\n\t\t\targs = func.slice();\n\t\t\tfunc = args.shift();\n\t\t}\n\t\targs.push( (err, data) => {\n\t\t\tif (err) return callback(err);\n\t\t\tresults[i-1] = data;\n\t\t\tif (i<c) next();\n\t\t\telse callback(null, ...results);\n\t\t});\n\t\tfunc(...args);\n\t};\n\tnext();\n}\n\n\n/** Choose your own adventure.\n *\tParallel: `(tasks, callback)`\n *\tSequence: `(true, tasks, callback)`\n */\nexport default (...args) => {\n\tif (args.length===2) return parallel(...args);\n\tsequence(...args.slice(1));\n};\n"]}